name: 'Sync modio mod assets'
description: 'This action syncs modio mod assets.'
author: 'James Carter'
branding:
  icon: 'refresh-cw'
  color: 'gray-dark'
inputs:
  LOGO_PATH:
    description: 'Path to the logo.'
    required: true
  IMAGES_PATH:
    description: 'Path to the images.'
    required: true
  README_PATH:
    description: 'Path to the README file.'
    required: true
  PROJECT_AUTHOR:
    description: 'Author of the project.'
    required: true
  PROJECT_NAME:
    description: 'Name of the project.'
    required: true
  VERSION:
    description: 'Optional - Version of the mod. Defaults to latest github release.'
    required: false
  PROJECT_URL:
    description: 'Homepage URL displayed on mod.io.'
    required: true
  IMEJIS_GENERATE_IMAGE:
    description: 'Generate image from imejis.io.'
    required: false
    default: "false"
  IMEJIS_DESIGN_ID:
    description: 'Imejis Design ID.'
    required: false
  IMEJIS_KEY:
    description: 'Imejis Key.'
    required: false
  MODIO_GAME:
    description: 'Mod.io Game Id.'
    required: true
  MODIO_MOD:
    description: 'Mod.io Mod Id.'
    required: true
  MODIO_TOKEN:
    description: 'Mod.io Token.'
    required: true
  BACKGROUND_COLOR:
    description: 'Optional - Background color used to pad resized images.'
    required: false
    default: "#0a1206"
  IMAGE_SIZE:
    description: 'Optional - ImageMagick resize image resolution.'
    required: false
    default: "1920x1080"
  LOGO_UPLOAD_PATH:
    description: 'Optional - Path to upload the logo.'
    required: false
    default: "temp_upload/0000_logo.png"
  IMAGES_UPLOAD_PATH:
    description: 'Optional - Path to upload the images.'
    required: false
    default: "temp_upload"
  IMAGE_ZIP:
    description: 'Optional - Path to the zip file of the images.'
    required: false
    default: "temp_upload/images.zip"
runs:
  using: 'composite'
  steps:
    - name: Determine Version
      shell: bash
      if: ${{ inputs.VERSION }} == ""
      run: |
        VERSION=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    - name: Install tools
      shell: bash
      run: |
        sudo apt-get install pandoc
        sudo apt-get install jq
        sudo apt-get install zip
        sudo apt-get install imagemagick
    - name: Configure ImageMagick
      shell: bash
      run: |
        sudo sed -i '/disable ghostscript format types/,+6d' /etc/ImageMagick-6/policy.xml
        sudo sed -i -E 's/name="memory" value=".+"/name="memory" value="8GiB"/g' /etc/ImageMagick-6/policy.xml
        sudo sed -i -E 's/name="map" value=".+"/name="map" value="8GiB"/g' /etc/ImageMagick-6/policy.xml
        sudo sed -i -E 's/name="area" value=".+"/name="area" value="8GiB"/g' /etc/ImageMagick-6/policy.xml
        sudo sed -i -E 's/name="disk" value=".+"/name="disk" value="8GiB"/g' /etc/ImageMagick-6/policy.xml
    - name: Convert README to HTML
      shell: bash
      run: | 
        pandoc ${{ inputs.README_PATH }} -o README.html
        README_HTML_SINGLE_LINE=$(cat README.html | tr '\n' ' ')
        README_ENCODED=$(echo -n "$README_HTML_SINGLE_LINE" | jq -s -R -r @uri)
        echo "README_HTML=$(printf '%q' "$README_ENCODED")" >> $GITHUB_ENV
    - name: Generate Logo
      shell: bash
      run: |      
        if [ ! -f "${{ inputs.LOGO_PATH }}" ]; then
          if [ "${{ inputs.IMEJIS_GENERATE_IMAGE }}" == "false" ]; then
              echo "No logo found at ${{ inputs.LOGO_PATH }} and IMEJIS_GENERATE_IMAGE is false. "Downloading basic image."
              text="${{ inputs.PROJECT_NAME }} $VERSION}"
              colour=${"${{ inputs.BACKGROUND_COLOR }}"//#/}
              wget -O "${{ inputs.LOGO_PATH }}" "https://dummyimage.com/${{ inputs.IMAGE_SIZE }}/${colour}/ffffff&text=${text}"
            exit 1
          fi

          printf -v JSON_DATA '
          {
            "project": "%s",
            "author": "%s",
            "version": "%s"
          }' "${{ inputs.PROJECT_NAME }}" "${{ inputs.PROJECT_AUTHOR }}" "${{ inputs.VERSION }}"

          echo "Downloading logo from imejis.io"
          curl "https://api.imejis.io/api/designs/${{ inputs.IMEJIS_DESIGN_ID }}" \
            --header "dma-api-key: ${{ inputs.IMEJIS_KEY }}" \
            --header 'Content-Type: application/json' \
            --data "$JSON_DATA" \
            --output "${{ inputs.LOGO_PATH }}"
        fi
    - name: Resize images for mod.io
      shell: bash
      run: |
        mkdir -p "${{ inputs.IMAGES_UPLOAD_PATH }}"
        rm -rf "${{ inputs.IMAGES_UPLOAD_PATH }}"/*

        convert "${{ inputs.LOGO_PATH }}" -resize "${{ inputs.IMAGE_SIZE }}" -background "${{ inputs.BACKGROUND_COLOR }}" -gravity center -extent "${{ inputs.IMAGE_SIZE }}" "${{ inputs.LOGO_UPLOAD_PATH }}"
      
        for file in $IMAGES_PATH/*; do
          if [[ -f $file ]]; then
            filename=$(basename -- "$file")
            if file --mime-type "$file" | grep -qE 'image/(jpeg|png|gif|tiff|bmp)'; then
              if [[ $file == *.gif ]]; then
                convert "${file}[0]" -resize "${{ inputs.IMAGE_SIZE }}" -background "${{ inputs.BACKGROUND_COLOR }}" -gravity center -extent "${{ inputs.IMAGE_SIZE }}" "${{ inputs.IMAGES_UPLOAD_PATH }}/${filename}.png"
              else
                convert "$file" -resize ${{ inputs.IMAGE_SIZE }} -background "${{ inputs.BACKGROUND_COLOR }}" -gravity center -extent ${{ inputs.IMAGE_SIZE }} "${{ inputs.IMAGES_UPLOAD_PATH }}/$filename"
              fi
            fi
          fi
        done
    - name: Zip images
      shell: bash
      run: |
        zip -r -j "${{ inputs.IMAGE_ZIP }}" "${{ inputs.IMAGES_UPLOAD_PATH }}" "${{ inputs.LOGO_UPLOAD_PATH }}"
    - name: Remove images from mod.io
      shell: bash
      run: |
        RESPONSE=$(curl -s -H "Authorization: Bearer ${{ inputs.MODIO_TOKEN }}" "https://api.mod.io/v1/games/${{ inputs.MODIO_GAME }}/mods/${{ inputs.MODIO_MOD }}")
        IMAGES_JSON=$(echo "$RESPONSE" | jq -r '.media.images[] | @base64')
        
        for image in $IMAGES_JSON; do
          filename=$(echo "$image" | base64 --decode | jq -r '.filename')
          curl -X DELETE "https://api.mod.io/v1/games/${{ inputs.MODIO_GAME }}/mods/${{ inputs.MODIO_MOD }}/media" \
          -H "Authorization: Bearer ${{ inputs.MODIO_TOKEN }}" \
          -d "images[]=$filename"
        done
    - name: Upload images to mod.io
      shell: bash
      run: |
        curl "https://api.mod.io/v1/games/${{ inputs.MODIO_GAME }}/mods/${{ inputs.MODIO_MOD }}/media" \
        -H "Authorization: Bearer ${{ inputs.MODIO_TOKEN }}" \
        -F "logo=@${{ inputs.LOGO_UPLOAD_PATH }}" \
        -F "images=@${{ inputs.IMAGE_ZIP }}"
    - name: Update modio mod description
      shell: bash
      run: |
        curl -X PUT "https://api.mod.io/v1/games/${{ inputs.MODIO_GAME }}/mods/${{ inputs.MODIO_MOD }}" \
        -H "Authorization: Bearer ${{ inputs.MODIO_TOKEN }}" \
        -d "description=$README_HTML" \
        -d "homepage_url=${{ inputs.PROJECT_URL }}"            